var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');

var Hwi = xdc.useModule('ti.sysbios.family.c28.Hwi');
var Boot = xdc.useModule('ti.catalog.c2800.initF2837x.Boot');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var ti_sysbios_family_c28_Timer = xdc.useModule('ti.sysbios.family.c28.Timer');
var ti_sysbios_hal_Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
 */
Text.isLoaded = false;

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;

/* 
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x0;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x100;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 256;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 4;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

/*
 * Build a custom BIOS library.  The custom library will be smaller than the 
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = true;

Boot.SPLLIMULT = 40;
BIOS.cpuFreq.lo = 200000000;
Boot.SYSCLKDIVSEL = 1;
Boot.OSCCLKSRCSEL = Boot.OscClk_XTAL;
Idle.idleFxns[0] = "&myIdleFxn";
var ti_sysbios_family_c28_Timer0Params = new ti_sysbios_family_c28_Timer.Params();
ti_sysbios_family_c28_Timer0Params.instance.name = "myTimer0";
ti_sysbios_family_c28_Timer0Params.period = 2000000;
ti_sysbios_family_c28_Timer0Params.periodType = xdc.module("ti.sysbios.interfaces.ITimer").PeriodType_COUNTS;
Program.global.myTimer0 = ti_sysbios_family_c28_Timer.create(null, "&myTickFxn", ti_sysbios_family_c28_Timer0Params);
Idle.idleFxns[1] = "&myIdleFxn2";
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "hwi0";
Program.global.hwi0 = Hwi.create(32, "&adc_hwi", hwi0Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "hwi1";
Program.global.hwi1 = Hwi.create(35, "&button_press", hwi1Params);
var swi0Params = new Swi.Params();
swi0Params.instance.name = "swi0";
swi0Params.priority = 4;
Program.global.swi0 = Swi.create("&calc_FFT_swi4", swi0Params);
var task0Params = new Task.Params();
task0Params.instance.name = "task0";
task0Params.priority = 8;
Program.global.task0 = Task.create("&Print_tsk8", task0Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "testing_sem";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.testing_sem = Semaphore.create(null, semaphore0Params);
var task1Params = new Task.Params();
task1Params.instance.name = "task1";
task1Params.priority = 9;
Program.global.task1 = Task.create("&wait_tsk9", task1Params);
var task2Params = new Task.Params();
task2Params.instance.name = "task2";
task2Params.priority = 4;
Program.global.task2 = Task.create("&Start_sampling_tsk4", task2Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "state_sem";
Program.global.state_sem = Semaphore.create(null, semaphore1Params);
var swi1Params = new Swi.Params();
swi1Params.instance.name = "swi1";
swi1Params.priority = 5;
Program.global.swi1 = Swi.create("&Menu_swi5", swi1Params);
var swi2Params = new Swi.Params();
swi2Params.instance.name = "swi2";
swi2Params.priority = 6;
Program.global.swi2 = Swi.create("&Record_swi6", swi2Params);
var swi3Params = new Swi.Params();
swi3Params.instance.name = "swi3";
swi3Params.priority = 7;
Program.global.swi3 = Swi.create("&PvP_swi7", swi3Params);
var task3Params = new Task.Params();
task3Params.instance.name = "task3";
task3Params.priority = 10;
Program.global.task3 = Task.create("&pwm_tsk10", task3Params);
var task4Params = new Task.Params();
task4Params.instance.name = "task999";
Program.global.task999 = Task.create("&Testing", task4Params);
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "pwm_sem";
semaphore2Params.mode = Semaphore.Mode_BINARY;
Program.global.pwm_sem = Semaphore.create(null, semaphore2Params);
var semaphore3Params = new Semaphore.Params();
semaphore3Params.instance.name = "sampling_sem";
Program.global.sampling_sem = Semaphore.create(null, semaphore3Params);
var semaphore4Params = new Semaphore.Params();
semaphore4Params.instance.name = "wait_sem";
Program.global.wait_sem = Semaphore.create(null, semaphore4Params);
var semaphore5Params = new Semaphore.Params();
semaphore5Params.instance.name = "print_sem";
Program.global.print_sem = Semaphore.create(null, semaphore5Params);
var task5Params = new Task.Params();
task5Params.instance.name = "task5";
Program.global.task5 = Task.create("&print_message_tsk7", task5Params);
var semaphore6Params = new Semaphore.Params();
semaphore6Params.instance.name = "message_sem";
semaphore6Params.mode = Semaphore.Mode_BINARY;
Program.global.message_sem = Semaphore.create(null, semaphore6Params);
